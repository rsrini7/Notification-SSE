spring:
  application:
    name: notification-service
  
  # H2 Database Configuration
  datasource:
    url: jdbc:h2:mem:notificationdb;MODE=ORACLE;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: 
    driver-class-name: org.h2.Driver
  h2:
    console:
      enabled: true
      path: /h2-console
  
  # JPA Configuration
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        format_sql: true
    defer-datasource-initialization: true
  
  # SQL Initialization
  sql:
    init:
      mode: always
      schema-locations: classpath:schema.sql
      data-locations: classpath:data.sql
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: notification-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: java.util,java.lang,com.example.notification.model,com.example.notification.dto
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    listener:
      ack-mode: RECORD
      common-error-handler:
        enabled: true
        max-attempts: 3 # Total attempts
        back-off: 1000  # Backoff interval in ms
        # For actual DLT, a DeadLetterPublishingRecoverer bean is usually configured.
        # These properties will use the default DefaultErrorHandler with specified retries/backoff.
  
  # Email Configuration
  mail:
    host: localhost # Use MailHog running locally
    port: 1025     # MailHog SMTP port
    # MailHog does not require authentication
    # username:
    # password:
    properties:
      mail:
        smtp:
          auth: false # MailHog does not require authentication
          starttls:
            enable: false # MailHog does not use STARTTLS

# Server Configuration
server:
  port: 8080
  max-http-request-header-size: 131072

# Custom Application Properties
notification:
  kafka:
    topics:
      notifications: notifications
      critical-notifications: critical-notifications
      broadcast-notifications: broadcast-notifications
  security:
    jwt:
      secret: ${JWT_SECRET:defaultSecretKeyForDevelopmentOnlyReplaceInProduction}
      expiration: 86400000 # 24 hours in milliseconds

logging:
  file:
    name: backend.log
  
  # Logging levels configuration
  level:
    # Security logging
    '[org.springframework.security]': DEBUG
    '[org.springframework.security.web]': DEBUG
    '[org.springframework.security.authentication]': DEBUG
    '[org.springframework.security.web.access.intercept]': DEBUG
    '[org.springframework.security.config]': DEBUG
    
    # Application specific packages
    '[com.example.notification]': DEBUG
    '[com.example.notification.config]': TRACE
    '[com.example.notification.security]': TRACE
    
    # Kafka logging (reduced verbosity)
    '[org.apache.kafka.clients.consumer.internals.ConsumerCoordinator]': WARN
    '[org.apache.kafka.clients.consumer.ConsumerRebalanceListener]': WARN
    '[org.springframework.kafka.listener.KafkaMessageListenerContainer]': WARN
    '[org.springframework.kafka.KafkaListenerEndpointContainer]': WARN
    '[org.springframework.kafka.listener.adapter]': WARN
    '[org.springframework.kafka.support]': WARN
    '[org.springframework.kafka]': WARN
    '[org.apache.kafka.clients.consumer.internals.SubscriptionState]': WARN
    
    # Other logging
    '[org.hibernate.SQL]': WARN
    '[org.hibernate.type.descriptor.sql.BasicBinder]': WARN
    '[org.hibernate.engine.jdbc.spi.SqlStatementLogger]': WARN
    '[org.springframework.jdbc.core.JdbcTemplate]': WARN
    '[org.springframework.orm.jpa.JpaTransactionManager]': WARN
    '[org.springframework.transaction]': WARN
    
    # Additional logger levels
    '[org.apache.kafka.clients.consumer.internals.ConsumerRebalanceListenerInvoker]': WARN
    '[io.micrometer.core.instrument.MeterRegistry]': ERROR
    '[org.apache.kafka.clients.NetworkClient]': WARN
    '[org.apache.kafka.clients.consumer.internals]': WARN
    
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"